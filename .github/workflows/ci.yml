name: CI

on:
  push:
    branches:
      - 'latest'
      - 'b[0-9][0-9]?.[0-9][0-9]?.[0-9][0-9]?'
      - 'seanlandsman-patch-9'
  pull_request:
    branches:
      - 'latest'
      - 'next'
      - 'b[0-9][0-9]?.[0-9][0-9]?.[0-9][0-9]?'
      - 'seanlandsman-patch-9'
  workflow_dispatch:
    inputs:
      run_docs:
        description: 'Skip docs build & link checker'
        type: 'choice'
        required: true
        default: 'true'
        options:
          - 'true'
          - 'false'
      clean_checkout:
        description: 'Disable all caching'
        type: 'choice'
        required: true
        default: 'false'
        options:
          - 'true'
          - 'false'
      nx_command:
        type: 'choice'
        required: true
        default: 'affected'
        options:
          - 'affected'
          - 'run-many'
env:
  #NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
  NX_NO_CLOUD: true
  # NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_BRANCH: ${{ github.ref }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  SHARP_IGNORE_GLOBAL_LIBVIPS: true
  YARN_REGISTRY: "http://52.50.158.57:4873"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/latest' }}

jobs:
  build_lint:
    name: Build & Lint
    outputs:
      nx_base: ${{ steps.setup.outputs.base }}
      build: ${{ steps.build.outcome || '' }}
      lint: ${{ steps.lint.outcome || '' }}
      format: ${{ steps.format.outcome || '' }}
      test_count: ${{ steps.matrix.outputs.test_count }}
      test_matrix: ${{ steps.matrix.outputs.test_matrix }}
      e2e_test_count: ${{ steps.matrix.outputs.e2e_test_count }}
      e2e_test_matrix: ${{ steps.matrix.outputs.e2e_test_matrix }}
      #      test_pkg_matrix: ${{ steps.matrix.outputs.pkg_matrix }}
      build_type: ${{ steps.setup.outputs.type }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # shallow copy

      - name: Fetch Refs
        run: |
          git fetch origin --depth 1 latest
          git fetch origin --depth 1 tag latest-success

      - name: Setup
        id: setup
        uses: ./.github/actions/setup-nx
        with:
          cache_mode: ${{ github.event.inputs.clean_checkout == 'true' && 'off' || 'rw' }}

      - name: nx format:check
        id: format
        if: steps.setup.outcome == 'success' || steps.setup.outcome == 'skipped'
        run: |
          if [[ "${{ github.event.inputs.nx_command || 'affected' }}" == "run-many" ]] ; then
            yarn nx format:check --all
          else
            yarn nx format:check --base ${{ steps.setup.outputs.base }}
          fi

      - name: nx lint
        run: |
          yarn nx lint

      - name: nx build
        run: |
          yarn nx generate-doc-references  
          yarn nx generate-examples
          yarn nx run-many --t build --exclude ag-grid-docs --exclude all
          # yarn nx build 

      - name: calculate matrix
        id: matrix
        run: |
          if [[ "${{ github.event.inputs.nx_command || 'affected' }}" == "run-many" ]] ; then
            count=10
          else
            count=$(yarn -s nx show projects --affected --base ${{ steps.setup.outputs.base }} -t test | wc -l)
          fi

          matrix=$(node ./scripts/test/calculate-shards.js eval --ratio 1 --zero ${count} --max 1)
          echo "test_matrix=${matrix}" >> $GITHUB_OUTPUT
          echo "test_count=${count}" >> $GITHUB_OUTPUT
          echo "Test matrix determined to be: ${matrix}"

          # only ag-grid-module-size is the only e2e to shard - and 3 is optimal atm for it
          e2e_count=3

          e2e_matrix=$(node ./scripts/test/calculate-shards.js eval --ratio 1 --zero ${e2e_count})
          echo "e2e_test_matrix=${e2e_matrix}" >> $GITHUB_OUTPUT
          echo "e2e_test_count=${e2e_count}" >> $GITHUB_OUTPUT
          echo "e2e Test matrix determined to be: ${e2e_matrix}"

  #          pkg_matrix=$(node ./scripts/test/calculate-pkg-shards.js)
  #          echo "pkg_matrix=${pkg_matrix}" >> $GITHUB_OUTPUT
  #          echo "Package test matrix determined to be: ${pkg_matrix}"

  test:
    runs-on: ubuntu-24.04
    name: Unit & Integration Tests (${{ matrix.shard }}/${{ strategy.job-total }})
    needs: build_lint
    if: needs.build_lint.outputs.test_count > 0
    strategy:
      matrix: ${{ fromJson(needs.build_lint.outputs.test_matrix )}}
      fail-fast: false
    env:
      NX_PARALLEL: 1
      NX_BASE: ${{ needs.build_lint.outputs.nx_base }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # shallow copy

      - name: Fetch Refs
        run: |
          git fetch origin --depth 1 latest
          git fetch origin --depth 1 tag latest-success

      - name: Setup
        id: setup
        uses: ./.github/actions/setup-nx
        with:
          cache_mode: ro

      - name: nx test
        if: matrix.shard != 0
        id: test
        run: yarn nx ${{ github.event.inputs.nx_command || 'affected' }} -t test --configuration=ci --exclude tag:no-sharding --exclude all --shard=${{ matrix.shard }}/$((${{ strategy.job-total }} - 1))
      - name: nx test (non-sharded)
        if: matrix.shard == 0
        id: test-no-shard
        run: yarn nx ${{ github.event.inputs.nx_command || 'affected' }} -t test --configuration=ci --exclude '*,!tag:no-sharding'
      #           - name: nx benchmark
      #             if: matrix.shard == 0
      #             id: benchmark
      #             run: yarn nx ${{ github.event.inputs.nx_command || 'affected' }} -t benchmark --configuration=ci --exclude all
      - name: nx pack:verify
        if: matrix.shard == 0
        id: pack-verify
        run: |
          yarn nx ${{ github.event.inputs.nx_command || 'affected' }} -t pack:verify
      - name: Persist test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{matrix.shard}}
          path: |
            reports/
            packages/**/__diff_output__/*

  e2e:
    runs-on: ubuntu-latest
    name: E2E Tests
    needs: build_lint
    if: needs.build_lint.outputs.e2e_test_count > 0
    strategy:
      matrix: ${{ fromJson(needs.build_lint.outputs.e2e_test_matrix )}}
      fail-fast: false
    env:
      NX_PARALLEL: 1
      NX_BASE: ${{ needs.build_lint.outputs.nx_base }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # shallow copy

      - name: Fetch Refs
        run: |
          git fetch origin --depth 1 latest
          git fetch origin --depth 1 tag latest-success

      - name: Setup
        id: setup
        uses: ./.github/actions/setup-nx
        with:
          cache_mode: ro

      - name: nx test:e2e
        if: matrix.shard != 0
        id: test
        run: yarn nx ${{ github.event.inputs.nx_command || 'affected' }} -t test:e2e --configuration=ci --exclude '!tag:sharding' --exclude all --shard=${{ matrix.shard }}/$((${{ strategy.job-total }} - 1))
      - name: nx test:e2e (non-sharded)
        if: matrix.shard == 0
        id: test-no-shard
        run: yarn nx ${{ github.event.inputs.nx_command || 'affected' }} -t test:e2e --configuration=ci --exclude 'tag:sharding' --exclude all

  #      - name: Persist test results
  #        if: always()
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: test-results-e2e-shard-${{matrix.shard}}
  #          path: |
  #            reports/

  docs:
    runs-on: ubuntu-latest
    name: Docs Build & Link Checker
    needs: build_lint
    if: needs.build_lint.result == 'success' && ${{ github.event.inputs.run_e2e }}
    strategy:
      fail-fast: false
    env:
      NX_BASE: ${{ needs.build_lint.outputs.nx_base }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # shallow copy

      - name: Fetch Refs
        run: |
          git fetch origin --depth 1 latest
          git fetch origin --depth 1 tag latest-success

      - name: Setup
        id: setup
        uses: ./.github/actions/setup-nx
        with:
          cache_mode: ro

      - name: docs build and link checker
        run: CHECK_LINKS=true CHECK_REDIRECTS=true yarn nx run ag-grid-docs:build -c staging

  #      - name: Persist test results
  #        if: always()
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: test-results-docs
  #          path: |
  #            reports/

  report:
    runs-on: ubuntu-24.04
    needs: [ build_lint, test, e2e, docs ]
    if: cancelled() != true
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Fetch Refs
        run: |
          git fetch origin --depth 1 latest
          git fetch origin --depth 1 tag latest-success

      - uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Merge JUnit Report XMLs
        run: |
          yarn global add junit-report-merger
          reports=$(find test-results/ -name \*.xml -type f -exec basename \{\} \; | sort | uniq)
          mkdir -p reports/
          echo "$reports" | (while read name ; do
            yarn exec -s jrm reports/${name} "test-results/**/${name}"
          done)

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: needs.test.result == 'success' || needs.test.result == 'failure'
        id: testReport
        continue-on-error: true
        with:
          name: 'Tests Results'
          path: reports/*.xml
          reporter: jest-junit

      - name: Check last job status
        id: lastJobStatus
        if: always() && github.ref == 'refs/heads/latest'
        run: |
          WORKFLOW_STATUS="success"
          if [[ "${{ needs.build_lint.result }}" == "failure" ]] ; then
            WORKFLOW_STATUS="failure"
          elif [ "${{ needs.test.result }}" == "failure" ] ; then
            WORKFLOW_STATUS="failure"
          elif [ "${{ needs.e2e.result }}" == "failure" ] ; then
            WORKFLOW_STATUS="failure"
          elif [ "${{ needs.fw_pkg_test.result }}" == "failure" ] ; then
            WORKFLOW_STATUS="failure"
          elif [ "${{ needs.sonarqube.result }}" == "failure" ] ; then
            WORKFLOW_STATUS="partial"
          fi
          echo "workflowStatus=${WORKFLOW_STATUS}" >> $GITHUB_OUTPUT

          LAST_WORKFLOW_STATUS=$(gh run list --workflow .github/workflows/ci.yml -b latest | grep -oh "completed.*" | grep -v "cancelled" | head -1 | awk '{print $2}')
          if [ "$GITHUB_RUN_ATTEMPT" -ge 2 ]; then
            # Handle re-run cases - there is no way to query the previous run status, so we assume the most
            # common scenario will be re-run after failure.
            LAST_WORKFLOW_STATUS="failure"
          fi
          if [ "$LAST_WORKFLOW_STATUS" != "$WORKFLOW_STATUS" ]; then
            echo "status changed from $LAST_WORKFLOW_STATUS to $WORKFLOW_STATUS"
            echo "changedState=true" >> $GITHUB_OUTPUT
          else
            echo "status is still $WORKFLOW_STATUS"
            echo "changedState=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #      - name: Commit History
      #        id: commits
      #        if: always() && job.status != 'cancelled' # && github.ref == 'refs/heads/latest' && steps.lastJobStatus.outputs.changedState == 'true '
      #        run: |
      #          GIT_LOG=$(git log HEAD ^${{ needs.build_lint.outputs.nx_base }} --format="%an (%h) %s")
      #          echo "GIT_LOG<<EOF" >> $GITHUB_ENV
      #          echo "$GIT_LOG" >> $GITHUB_ENV
      #          echo "EOF" >> $GITHUB_ENV

      #      - name: Tag Latest Successful Commit
      #        if: success() && github.ref == 'refs/heads/latest' && steps.lastJobStatus.outputs.workflowStatus != 'failure'
      #        uses: EndBug/latest-tag@latest
      #        with:
      #          ref: latest-success
      #          description: Latest commit to pass GitHub Actions workflow on latest branch.

#      - name: Slack Notification
#        uses: rtCamp/action-slack-notify@v2
#        if: always() && job.status != 'cancelled' #&& github.ref == 'refs/heads/latest' && steps.lastJobStatus.outputs.changedState == 'true'
#        env:
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#          SLACK_COLOR: ${{ steps.lastJobStatus.outputs.workflowStatus != 'failure' && 'success' || 'failure' }}
#          SLACK_ICON: https://avatars.slack-edge.com/2020-11-25/1527503386626_319578f21381f9641cd8_192.png
#          SLACK_USERNAME: ag-grid CI
#          SLACK_FOOTER: ''
#          SLACK_MESSAGE: >
#            Build: ${{ needs.build_lint.outputs.build == 'success' && '✅' || needs.build_lint.outputs.build == 'failure' && '❌' || 'NA' }}
#            Lint: ${{ needs.build_lint.outputs.lint == 'success' && '✅' || needs.build_lint.outputs.lint == 'failure' && '❌' || 'NA' }}
#            Format: ${{ needs.build_lint.outputs.format == 'success' && '✅' || needs.build_lint.outputs.format == 'failure' && '❌' || 'NA' }}
#            Test: ${{ needs.test.result == 'success' && '✅' || needs.test.result == 'failure' && '❌' || 'NA' }}
#            E2E: ${{ needs.e2e.result == 'success' && '✅' || needs.e2e.result == 'failure' && '❌' || 'NA' }}
#            FW Pkg: ${{ needs.fw_pkg_test.result == 'success' && '✅' || needs.fw_pkg_test.result == 'failure' && '❌' || 'NA' }}
#            Sonar: ${{ needs.sonarqube.result == 'success' && '✅' || needs.sonarqube.result == 'failure' && '❌' || 'NA' }}
#
#            *Changes:*
#
#            ${{ env.GIT_LOG }}
