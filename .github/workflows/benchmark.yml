name: Benchmark

on:
  issue_comment:
    types: [ created ]
  workflow_dispatch:
    inputs:
      notify:
        description: 'Notify Slack channel'
        type: boolean
        default: false
        required: true
      force_pr_id:
        description: 'PR ID to update (used for debugging this workflow)'
        type: number
        required: false
      force_jira_ticket:
        description: 'Force create a Jira ticket even if the run is not scheduled'
        type: boolean
        default: false
        required: true
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

env:
  NX_NO_CLOUD: true
  NX_BRANCH: ${{ github.ref }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  SHARP_IGNORE_GLOBAL_LIBVIPS: true
  YARN_REGISTRY: "http://52.50.158.57:4873"
  CI: true
  PR_ID: ${{ inputs.force_pr_id || github.event.issue.number }}
  COMMENT_FILE: ./comment.md
  SLACK_FILE: ./slack.json
  SLACK_FILE_SNIPPET: ./slack-snippet.md
  JIRA_FILE: ./jira.md
  DEFAULT_RETENTION_DAYS: 30

permissions:
  contents: read

jobs:
  benchmark:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && github.event.comment.body == '/benchmarks') || github.event_name == 'schedule'
    env:
      JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Notify start
        id: notify-start
        uses: actions/github-script@v7
        continue-on-error: true
        if: ${{ env.PR_ID }}
        with:
          result-encoding: string
          script: |
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: process.env.PR_ID ? parseInt(process.env.PR_ID, 10) : context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üõé Started a benchmarking job: ${process.env.JOB_URL}`
            })
            return comment.id;

      - name: Assign correct Branch name
        id: get-branch
        env:
          REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo PR_ID=$PR_ID
          echo github.event.issue.number=${{ github.event.issue.number }}
          if [[ !!"${{ steps.notify-start.outputs.result }}" ]] ; then
            # For PR comments, get the branch from the PR
            echo "branch=$(gh pr view $PR_ID --repo $REPO --json headRefName --jq '.headRefName')" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]] ; then
            # For scheduled workflow dispatch, use the 'latest' branch
            echo "branch=latest" >> $GITHUB_OUTPUT
          else
            # For manual workflow dispatch, use the current branch
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ steps.get-branch.outputs.branch }}

      - name: Fetch Refs
        run: |
          git fetch origin --depth 1 latest
          git fetch origin --depth 1 tag latest-success

      - name: Notify Progress
        uses: actions/github-script@v7
        continue-on-error: true
        if: ${{ steps.notify-start.outputs.result }}
        with:
          script: |
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.notify-start.outputs.result }},
              body: `üèó Running setup: ${process.env.JOB_URL}`
            })

      - name: Setup
        id: setup
        uses: ./.github/actions/setup-nx
        with:
          cache_mode: rw

      - name: Notify Progress
        uses: actions/github-script@v7
        continue-on-error: true
        if: ${{ steps.notify-start.outputs.result }}
        with:
          script: |
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.notify-start.outputs.result }},
              body: `üèó Building umd packages: ${process.env.JOB_URL}`
            })

      - name: Build umd packages
        id: build-umd
        if: ${{ steps.setup.outcome == 'success' || steps.setup.outcome == 'skipped' }}
        run: |
          echo "Building UMD packages..."
          npx nx run-many -t build --projects=ag-grid-{enterprise,community,angular,react,vue3}

      - name: Notify Progress
        uses: actions/github-script@v7
        continue-on-error: true
        if: ${{ steps.notify-start.outputs.result }}
        with:
          script: |
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.notify-start.outputs.result }},
              body: `üèó Installing Playwright Browsers: ${process.env.JOB_URL}`
            })

      - name: Install Playwright Browsers
        id: install-browsers
        if: ${{ steps.build-umd.outcome == 'success' }}
        run: |
          git status;
          npx playwright install --with-deps

      - name: Notify Progress
        uses: actions/github-script@v7
        continue-on-error: true
        if: ${{ steps.notify-start.outputs.result }}
        with:
          script: |
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.notify-start.outputs.result }},
              body: `üèÉ Running benchmarks:Ô∏è ${process.env.JOB_URL}`
            })

      - name: playwright test
        id: playwright-test
        continue-on-error: true
        if: ${{ steps.install-browsers.outcome == 'success' }}
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]] ; then
            npx playwright test -c ./testing/performance/playwright.config.ts ./testing/performance/e2e/cron.spec.ts
          else
            npx playwright test -c ./testing/performance/playwright.config.ts -gv ".*cron.*" ./testing/performance/e2e
          fi

      - name: Upload Benchmark Report
        id: upload-report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: ${{env.DEFAULT_RETENTION_DAYS}}

      - name: Prepare messages
        id: prepare-messages
        if: ${{ steps.upload-report.outputs.artifact-url }}
        env:
          REPORT_URL: ${{ steps.upload-report.outputs.artifact-url }}
          SLACK_CHANNEL: '#ci-grid-gate'
          SLACK_ICON: 'https://avatars.slack-edge.com/2020-11-25/1527503386626_319578f21381f9641cd8_192.png'
          SLACK_USERNAME: 'ag-grid CI'
          IS_SUCCESS: ${{ steps.playwright-test.outcome == 'success' || '' }}
        run: |
          node ./testing/shared/scripts/convert-playwright-output-to-slack-msg.mjs

      - name: Upload Snippet
        id: upload-snippet
        uses: actions/upload-artifact@v4
        if: ${{ steps.prepare-messages.outcome == 'success' }}
        with:
          name: slack-snippet
          path: ${{ env.SLACK_FILE_SNIPPET }}
          retention-days: ${{ env.DEFAULT_RETENTION_DAYS }}

      - name: Attach snippet
        uses: actions/github-script@v7
        id: attach-snippet
        if: ${{ steps.upload-snippet.outputs.artifact-url }}
        env:
          SNIPPET_URL: ${{ steps.upload-snippet.outputs.artifact-url }}
        with:
          script: |
            node ./testing/shared/scripts/attach-snippet.mjs

      - name: Slack Notification
        continue-on-error: true
        if: ${{ steps.upload-snippet.outputs.artifact-url }}
        env:
          SLACK_WEBHOOK: ${{ secrets.CI_GATE_WEBHOOK }}
          SNIPPET_URL: ${{ steps.upload-snippet.outputs.artifact-url }}
        run: |
          curl -X POST -H 'Content-type: application/json' $SLACK_WEBHOOK --data @$SLACK_FILE

      - name: Create Jira Ticket
        id: create-jira-ticket
        if: ${{ steps.attach-snippet.outcome == 'success' && steps.playwright-test.outcome != 'success' && (github.event_name == 'schedule' || inputs.force_jira_ticket) }}
        run: |
          node ./testing/shared/scripts/create-jira-ticket.mjs

      - name: Notify End
        uses: actions/github-script@v7
        continue-on-error: true
        if: ${{ steps.notify-start.outputs.result && steps.attach-snippet.outcome == 'success' }}
        env:
          COMMENT_ID: ${{ steps.notify-start.outputs.result }}
          IS_SUCCESS: ${{ steps.playwright-test.outcome == 'success' || '' }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const comment_id = process.env.COMMENT_ID;
            const pull_number = process.env.PR_ID;
            const body = require('fs').readFileSync(process.env.COMMENT_FILE, 'utf8');

            if (process.env.IS_SUCCESS) {
              await github.rest.issues.updateComment({ owner, repo, comment_id, body });
            } else {
              await github.rest.issues.deleteComment({ owner, repo, comment_id });
              await github.rest.pulls.createReview({ owner, repo, pull_number, event: "REQUEST_CHANGES", body });
            }
