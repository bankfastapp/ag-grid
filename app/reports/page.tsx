"use client" // Required for useState and event handlers
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { FileText, Download, PlusCircle, BarChartBig } from "lucide-react"
import { DocumentViewer } from "@/components/document-viewer" // Import the new viewer

const recentReports = [
  {
    id: "rep1",
    name: "Q2 Portfolio Performance",
    type: "Portfolio Analysis",
    dateGenerated: "2025-06-15",
    generatedBy: "System",
  },
  {
    id: "rep2",
    name: "Monthly Loan Origination Summary",
    type: "Loan Operations",
    dateGenerated: "2025-06-01",
    generatedBy: "Jane Doe",
  },
  {
    id: "rep3",
    name: "Risk Exposure Report - May",
    type: "Risk Management",
    dateGenerated: "2025-05-28",
    generatedBy: "System",
  },
  {
    id: "rep4",
    name: "Compliance Adherence Q1",
    type: "Compliance",
    dateGenerated: "2025-04-10",
    generatedBy: "John Smith",
  },
]

const reportTemplates = [
  {
    id: "tpl1",
    docName: "Standard Portfolio Analysis Template",
    name: "Standard Portfolio Analysis",
    description: "Comprehensive overview of portfolio metrics, risk, and return.",
    icon: BarChartBig,
    url: "/documents/form-1065-sample.png", // Using the sample PDF image
  },
  {
    id: "tpl2",
    docName: "Loan Origination Trends Template",
    name: "Loan Origination Trends",
    description: "Tracks loan application volumes, approval rates, and funding times.",
    icon: FileText,
    url: "/documents/form-1065-sample.png",
  },
  {
    id: "tpl3",
    docName: "Regulatory Compliance Summary Template",
    name: "Regulatory Compliance Summary",
    description: "Checks adherence to key regulatory requirements and flags exceptions.",
    icon: FileText,
    url: "/documents/form-1065-sample.png",
  },
]

export default function ReportsPage() {
  const [viewingDocument, setViewingDocument] = useState<{ name: string; url: string } | null>(null)
  const [isEditMode, setIsEditMode] = useState(false)

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
        <h1 className="text-3xl font-bold text-foreground">Reports Center</h1>
        <Button>
          <PlusCircle className="h-4 w-4 mr-2" /> Generate New Report
        </Button>
      </div>

      <section className="mb-10">
        <h2 className="text-xl font-semibold text-foreground mb-4">Recent Reports</h2>
        <Card>
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Report Name</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Date Generated</TableHead>
                  <TableHead>Generated By</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {recentReports.map((report) => (
                  <TableRow key={report.id}>
                    <TableCell className="font-medium flex items-center">
                      <FileText className="h-4 w-4 mr-2 text-primary" />
                      {report.name}
                    </TableCell>
                    <TableCell>{report.type}</TableCell>
                    <TableCell>{report.dateGenerated}</TableCell>
                    <TableCell>{report.generatedBy}</TableCell>
                    <TableCell className="text-right">
                      <Button variant="ghost" size="sm">
                        <Download className="h-4 w-4 mr-1" /> Download
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </section>

      <section>
        <h2 className="text-xl font-semibold text-foreground mb-4">Report Templates</h2>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {reportTemplates.map((template) => (
            <Card key={template.id} className="hover:shadow-lg transition-shadow">
              <CardHeader className="flex flex-row items-start gap-3 space-y-0">
                <div className="p-2 bg-primary/10 rounded-md">
                  <template.icon className="h-5 w-5 text-primary" />
                </div>
                <CardTitle className="text-base font-semibold text-foreground">{template.name}</CardTitle>
              </CardHeader>
              <CardContent>
                <CardDescription className="text-sm text-muted-foreground mb-4">{template.description}</CardDescription>
                <Button
                  variant="outline"
                  size="sm"
                  className="w-full"
                  onClick={() => setViewingDocument({ name: template.docName, url: template.url })}
                >
                  Use Template
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>

      {viewingDocument && (
        <DocumentViewer
          documentName={viewingDocument.name}
          documentUrl={viewingDocument.url}
          onClose={() => {
            setViewingDocument(null)
            setIsEditMode(false) // Reset edit mode on close
          }}
          documentType="Image/PNG" // Since we are using a PNG as a placeholder
          totalPages={1} // For the sample image
          isEditMode={isEditMode}
          onToggleEditMode={() => setIsEditMode(!isEditMode)}
        />
      )}
    </div>
  )
}
