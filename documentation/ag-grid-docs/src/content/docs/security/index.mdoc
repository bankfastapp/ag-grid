---
title: "Security"
---

The grid allows you to work with security tools and parameters to make your application meet your business requirements.

## Content Security Policy (CSP)

The basic information on Content Security Policy can be found on the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) website and will cover the necessary information on the subject. The grid works with CSP, but some basic configuration is necessary to have your application load correctly. Below is detailed what the minimum set of CSP rules for the grid is and why.

### script-src

If you are working with expressions / code parsing inside of the grid instead of functions, it will be necessary to add the `script-src 'unsafe-eval'` directive to your policy.

Using expressions instead of functions is an option for many grid properties such as [Cell Class Rules](./cell-styles/#cell-class-rules) and [Value Getters](./value-getters/). Below demonstrates the difference where expressions are used instead of functions.

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        // this column definition does NOT use expressions. no need for unsafe-eval
        {
            cellClassRules: {
                'rag-green': function(params) { return params.value < 20; },
                'rag-amber': function(params) { return params.value >= 20 && params.value < 25; },
                'rag-red': function(params) { return params.value >= 25; }
            },
            valueGetter: params => params.data.price * params.data.fx,
        },
        // this column definition does use expressions *** unsafe-eval is needed! ***
        {
            cellClassRules: {
                'rag-green': 'x < 20',
                'rag-amber': 'x >= 20 && x < 25',
                'rag-red': 'x >= 25'
            },
            valueGetter: 'data.price * data.fx',
        }
    ]
}
```

By default, [Advanced Filter](./filter-advanced) also requires `script-src 'unsafe-eval'`, however this can be disabled by [Suppressing Advanced Filter Function Evaluation](./filter-advanced/#suppress-advanced-filter-function-evaluation).

### style-src

[Themes](./theming) work by injecting CSS styles into the DOM when the grid initialises. By default this requires a `style-src 'unsafe-inline'` directive in your CSP.

You can avoid this using the `styleNonce` grid option.

```{% frameworkTransform=true %}
const gridOptions = {
    // The nonce should be a random value that changes with each page load.
    styleNonce: "416d1177"
}
```

This sets the nonce attribute on the style tag, so the grid will now work with the CSP directive `style-src 'nonce-416d1177'`.

CSP nonces are global to a page, where a page has multiple grids, every one must have the same styleNonce set. Consider using [global grid options](./grid-interface/#global-grid-options).

### img-src

The `img-src data:` directive is required because the grid uses data urls to embed SVG images in CSS files.

### font-src

If you are using [legacy themes](./theming-v32/) then the `font-src data:` directive is required. This is because legacy themes use data urls to embed the icon font CSS files. Theming API themes use SVG icons and so do not require this.

If you use the `loadThemeGoogleFonts` grid option, fonts will be loaded from the Google font CDN, which requires the `font-src fonts.gstatic.com` directive.

### Example of updating an existing CSP

Suppose your existing CSP is `default-src 'self'; img-src 'self' example.com`, which will load assets from your domain only, except for images which can also be loaded from example.com.

Based on the requirements above, you decide to add `img-src data:` and `style-src 'unsafe-inline'` to your CSP.

* There is an existing `img-src` directive, so the `data:` value can be appended to it, giving `img-src 'self' example.com data:`.
* There is no existing `style-src` directive, so the `default-src 'self'` directive will apply to styles. You should include `'self'` when you add the new directive, giving `style-src 'self' 'unsafe-inline'`.

The updated CSP is therefore `default-src 'self'; img-src 'self' example.com data:; style-src 'self' 'unsafe-inline'`.

## Security Vulnerability Testing

Applications may be required to pass an Application Security Test prior to being put into production. If your application is using AG Grid, you will want to make sure that AG Grid has also been tested for security vulnerabilities.

AG Grid is tested for a wide variety of security vulnerabilities using the [SonarQube](https://www.sonarqube.org/) automatic security testing tool. SonarQube performs testing using a number of security rules, covering well-established security vulnerability standards such as CWE, SANS Top 25 and OWASP Top 10. For more details please refer to the section on [Security-related Rules](https://docs.sonarqube.org/latest/user-guide/security-rules/#header-2).

## SonarQube Results

The SonarQube security test results for our main NPM packages are shown below:


| AG-Grid Package           | Result |
| ------------------------- | ------ |
| ag-grid-community         | [![Quality Badge](https://sonarcloud.io/api/project_badges/quality_gate?project=ag-grid-community)](https://sonarcloud.io/dashboard?id=ag-grid-community) |
| ag-grid-enterprise        | [![Quality Badge](https://sonarcloud.io/api/project_badges/quality_gate?project=ag-grid-enterprise)](https://sonarcloud.io/dashboard?id=ag-grid-enterprise) |

Results for AG-Charts are available distinctly: [AG Charts - SonarQube Results](https://www.ag-grid.com/charts/javascript/security/#sonarqube-results)
