---
title: 'Batch Editing'
enterprise: true
---

Batch editing allows you to edit multiple cells or rows in the grid before committing or reverting these edits. This is useful for scenarios where you want to make several edits at once without immediately updating the data source.

{% note %}
Batch editing is an advanced feature only available via the API to allow you to tailor it to your specific needs.
{% /note %}

## Enabling Batch Editing

Batch Editing is enabled by calling the grid API method `startBatchEdit()`.

```{% frameworkTransform=true %}
const gridOptions = {
    onGridReady: (params) => {
        params.api.startBatchEdit();
    }
}
```

The following example demonstrates basic batch editing functionality.

{% gridExampleRunner title="Batch Editing" name="batch-editing" exampleHeight=360 /%}

{% note %}
Batch Edit is only compatible with the [Client-Side Row Model](./row-models/).
{% /note %}

## Using API Methods to Batch Edit Data

Using the following API calls, you can build your own experience around the batch editing functionality.

The following example demonstrates a simple batch editing scenario: starting a batch, queuing edits and then either committing them or discarding them.

{% gridExampleRunner title="Batch Editing API" name="batch-editing-api" exampleHeight=560 /%}

The grid API methods `startEditingCell()` and `stopEditing()` can be used to control the editing state of individual cells. When you start editing a cell after enabling Batch Editing, the grid enters a batch editing mode where it can track changes. `isBatchEditing()` can be used to check if the grid is currently in batch editing mode. In this mode, `startEditingCell()` and `stopEditing()` affect only the cell editors, not the overall batch.

{% apiDocumentation source="grid-api/api.json" section="batch-editing" names=["isBatchEditing", "startBatchEdit", "commitBatchEdit", "cancelBatchEdit"] /%}

An example similar to above for showcasing Batch Editing API, with buttons for:

-   Set Editing Cells
-   Set Editing Cells (empty values)
-   Clear Editing cells

### Full Row Editing: Small explanation

When you edit a full row, the grid allows you to edit multiple cells in that row before committing the changes.

{% gridExampleRunner title="Batch Editing FullRow" name="batch-editing-fullrow" exampleHeight=560 /%}

## Batch Editing Lifecycle

As more cells are edited, each new edit will emit start events as required, but the stop events will only be emitted when the batch is completed.

{% apiDocumentation source="grid-events/events.json" section="editing" names=["rowEditingStarted", "cellEditingStarted", "cellEditingStopped", "rowEditingStopped"] /%}

## Customisation

### Custom Renderers

The `ICellRendererComp` interface provides a means for your cell renderer to update when edits are batched, to reflect the pending nature of the values. The `refresh` method that the grid calls when the cell needs to be re-rendered. The parameters include the latest pending value.

{% interfaceDocumentation interfaceName="ICellRendererComp" names=["refresh"] /%}

### Custom editors

As with custom renderers, the `ICellEditor` interface includes the `refresh` method, which the grid calls when the cell needs to be re-rendered. The parameters include the latest pending value.

{% interfaceDocumentation interfaceName="ICellEditor" names=["refresh"] /%}

### Styling

Small description how to change the styling

```scss
.ag-cell-batch-edit {
    background-color: var(--ag-cell-batch-edit-background-color);
    color: var(--ag-cell-batch-edit-text-color);
}
.ag-row-batch-edit {
    background-color: var(--ag-row-batch-edit-background-color);
    color: var(--ag-row-batch-edit-text-color);
}
```

{% gridExampleRunner title="Batch Editing Customisation" name="batch-editing-custom" exampleHeight=560 /%}

## Notes

Small description to explain consequences of using batch mid session (visible values are considered not original values).

{% gridExampleRunner title="Batch Editing Sort / Excel" name="batch-editing-sort-excel" exampleHeight=560 /%}
